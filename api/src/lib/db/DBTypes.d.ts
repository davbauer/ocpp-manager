/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type ChargerStatus = "Accepted" | "Pending" | "Rejected";

export type ConnectorStatus = "Available" | "Charging" | "Faulted" | "Finishing" | "Preparing" | "Reserved" | "SuspendedEV" | "SuspendedEVSE" | "Unavailable";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type PaymentStatus = "Failed" | "Paid" | "Pending";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export type TransactionStatus = "Active" | "Completed" | "Failed" | "Interrupted";

export interface ChargeAuthorization {
  chargerId: number;
  connectorId: number | null;
  createdAt: Generated<Timestamp>;
  expiryDate: Timestamp | null;
  friendlyName: Generated<string>;
  id: Generated<number>;
  rfidTagId: number | null;
  updatedAt: Generated<Timestamp>;
  wLimit: number | null;
}

export interface Charger {
  createdAt: Generated<Timestamp>;
  firmwareVersion: Generated<string | null>;
  friendlyName: Generated<string>;
  id: Generated<number>;
  lastHeartbeat: Generated<Timestamp | null>;
  model: Generated<string>;
  serialNumber: Generated<string>;
  shortcode: string;
  status: Generated<ChargerStatus>;
  updatedAt: Generated<Timestamp>;
  vendor: Generated<string>;
}

export interface Connector {
  chargerId: number;
  connectorId: number;
  createdAt: Generated<Timestamp>;
  errorCode: Generated<string | null>;
  id: Generated<number>;
  info: Generated<string | null>;
  maxCurrent: Generated<number>;
  status: Generated<ConnectorStatus>;
  updatedAt: Generated<Timestamp>;
  vendorErrorCode: Generated<string | null>;
}

export interface Migration {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  name: string;
}

export interface RfidTag {
  createdAt: Generated<Timestamp>;
  expiryDate: Timestamp | null;
  friendlyName: Generated<string>;
  id: Generated<number>;
  rfidTag: string;
  updatedAt: Generated<Timestamp>;
  wLimit: number | null;
}

export interface Setting {
  heartbeatInterval: Generated<number>;
  id: Generated<number>;
  systemMaintenance: Generated<boolean>;
}

export interface Telemetry {
  createdAt: Generated<Timestamp>;
  current: Generated<number>;
  id: Generated<number>;
  meterValue: number;
  sampledValue: Generated<Json | null>;
  transactionId: number;
  voltage: Generated<number>;
}

export interface Transaction {
  authorizationId: number | null;
  connectorId: number;
  createdAt: Generated<Timestamp>;
  energyDelivered: Generated<number | null>;
  id: Generated<number>;
  meterStart: number;
  meterStop: number | null;
  paymentStatus: Generated<PaymentStatus>;
  reason: Generated<string | null>;
  startTime: Timestamp;
  status: Generated<TransactionStatus>;
  stopTime: Timestamp | null;
}

export interface DB {
  chargeAuthorization: ChargeAuthorization;
  charger: Charger;
  connector: Connector;
  migration: Migration;
  rfidTag: RfidTag;
  setting: Setting;
  telemetry: Telemetry;
  transaction: Transaction;
}
