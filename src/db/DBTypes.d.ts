/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export interface Authorization {
  chargerId: number;
  createdAt: Generated<string | null>;
  expiryDate: string | null;
  id: Generated<number | null>;
  idTag: string;
  parentIdTag: string | null;
  status: string;
  updatedAt: Generated<string | null>;
}

export interface Chargers {
  createdAt: Generated<string | null>;
  firmwareVersion: string | null;
  id: Generated<number | null>;
  model: string;
  registrationStatus: Generated<string | null>;
  serialNumber: string;
  updatedAt: Generated<string | null>;
  vendor: string;
}

export interface ChargerStatus {
  connectorId: number;
  errorCode: string | null;
  id: Generated<number | null>;
  info: string | null;
  status: string;
  timestamp: Generated<string | null>;
  vendorErrorCode: string | null;
}

export interface Connectors {
  chargerId: number;
  connectorId: number;
  createdAt: Generated<string | null>;
  errorCode: string | null;
  id: Generated<number | null>;
  info: string | null;
  status: Generated<string>;
  updatedAt: Generated<string | null>;
  vendorErrorCode: string | null;
}

export interface Migrations {
  createdAt: Generated<string | null>;
  id: Generated<number | null>;
  name: string;
}

export interface Telemetry {
  id: Generated<number | null>;
  meterValue: number | null;
  sampledValue: string | null;
  timestamp: Generated<string | null>;
  transactionId: number;
}

export interface Transactions {
  connectorId: number;
  createdAt: Generated<string | null>;
  id: Generated<number | null>;
  idTag: string;
  meterStart: number | null;
  meterStop: number | null;
  reason: string | null;
  startTime: string;
  status: Generated<string | null>;
  stopTime: string | null;
  transactionId: number;
}

export interface DB {
  authorization: Authorization;
  chargers: Chargers;
  chargerStatus: ChargerStatus;
  connectors: Connectors;
  migrations: Migrations;
  telemetry: Telemetry;
  transactions: Transactions;
}
